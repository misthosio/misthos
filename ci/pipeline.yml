---
groups:
- name: misthos-web
  jobs:
  - install-deps
  - test
  - bump-minor
  - bump-patch
  - build
  - web-build
  - deploy-staging
  - deploy-web-staging
  - trigger-testnet
  - deploy-testnet
  - deploy-web-testnet
  - trigger-prod
  - deploy-prod
  - deploy-web-prod
- name: pipeline-image
  jobs: [build-task-image]

jobs:
- name: bump-minor
  public: true
  plan:
    - { get: misthos-build, trigger: true,  passed: [deploy-testnet] }
    - { get: build-version, params: {bump: minor}, passed: [deploy-testnet] }
    - { put: build-version,                 params: {file: build-version/number} }

- name: bump-patch
  public: true
  plan:
    - { get: misthos-build, trigger: true, passed: [build] }
    - { get: build-version, params: {bump: patch}, passed: [build] }
    - { put: build-version,                params: {file: build-version/number} }

- name: install-deps
  plan:
  - in_parallel:
    - {get: deps, trigger: true}
    - {get: pipeline-tasks}
    - {put: deps-version, params: {bump: minor}}
  - task: install-deps
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: deps
      - name: deps-version
      outputs:
      - name: bundled-deps
      run:
        path: pipeline-tasks/ci/tasks/install-deps.sh
  - put: bundled-deps
    params:
      file: bundled-deps/bundled-deps-*.tgz

- name: test
  plan:
  - in_parallel:
    - {get: repo, trigger: true}
    - {get: bundled-deps, trigger: true}
    - {get: pipeline-tasks}
    - {put: code-version, params: {bump: minor}}
  - task: test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: bundled-deps
      - name: code-version
      - name: repo
      outputs:
      - name: bundled-code
      run:
        path: pipeline-tasks/ci/tasks/run-tests.sh
  - in_parallel:
    - put: misthos-code
      params:
        file: bundled-code/misthos-code-*.tgz

- name: build
  plan:
  - in_parallel:
    - {get: repo, passed: [test]}
    - {get: misthos-code, trigger: true, passed: [test]}
    - {get: build-version }
    - {get: pipeline-tasks}
  - task: build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: misthos-code
      - name: build-version
      outputs:
      - name: build
      run:
        path: pipeline-tasks/ci/tasks/build.sh
  - put: misthos-build
    params:
      file: build/misthos-build-*.tgz

- name: web-build
  plan:
  - in_parallel:
    - {get: repo, passed: [test]}
    - {get: misthos-code, trigger: true, passed: [test]}
    - {get: build-version }
    - {get: pipeline-tasks }
  - task: web-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: misthos-code
      - name: build-version
      outputs:
      - name: web-build
      run:
        path: pipeline-tasks/ci/tasks/web-build.sh
  - put: misthos-web-build
    params:
      file: web-build/misthos-web-build-*.tgz

- name: deploy-staging
  plan:
  - in_parallel:
    - {get: misthos-build, trigger: true, passed: [build]}
    - {get: repo, trigger: false, passed: [build]}
    - {get: build-version, trigger: false, passed: [build], params: { bump: final}}
    - {get: pipeline-tasks}
  - task: deploy-staging
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: misthos-build
      params:
          GCP_SERVICE_ACCOUNT: ((gcp-service-account))
          SUBDOMAIN: staging
      run:
        path: pipeline-tasks/ci/tasks/deploy.sh
  - put: staging-branch
    params: {repository: repo, tag: build-version/version, tag_prefix: "v", force: true}
- name: deploy-web-staging
  plan:
  - in_parallel:
    - {get: misthos-web-build, trigger: true, passed: [web-build]}
    - {get: repo, trigger: false, passed: [web-build]}
    - {get: build-version, trigger: false, passed: [web-build]}
    - {get: pipeline-tasks}
  - task: deploy-web-staging
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: misthos-web-build
      params:
          GCP_SERVICE_ACCOUNT: ((gcp-service-account))
          SUBDOMAIN: web-staging
          WEB: "true"
      run:
        path: pipeline-tasks/ci/tasks/deploy.sh
  - put: web-staging-branch
    params: {repository: repo, force: true}

- name: trigger-testnet
  plan:
  - in_parallel:
    - {get: misthos-build, trigger: false, passed: [deploy-staging]}
    - {get: misthos-web-build, trigger: false, passed: [deploy-web-staging]}
    - {get: build-version, trigger: false, passed: [deploy-staging, deploy-web-staging] }
    - {get: repo, trigger: false, passed: [deploy-staging, deploy-web-staging]}
    - {get: pipeline-tasks}

- name: deploy-testnet
  plan:
  - in_parallel:
    - {get: misthos-build, trigger: true, passed: [trigger-testnet] }
    - {get: build-version, trigger: false, passed: [trigger-testnet] }
    - {get: repo, trigger: false, passed: [trigger-testnet] }
    - {get: pipeline-tasks }
  - task: deploy-testnet
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: misthos-build
      params:
          GCP_SERVICE_ACCOUNT: ((gcp-service-account))
          SUBDOMAIN: testnet
      run:
        path: pipeline-tasks/ci/tasks/deploy.sh
  - put: testnet-branch
    params: {repository: repo, tag: build-version/version, tag_prefix: "v", force: true}

- name: deploy-web-testnet
  plan:
  - in_parallel:
    - {get: misthos-web-build, trigger: true, passed: [trigger-testnet]}
    - {get: repo, trigger: false, passed: [trigger-testnet]}
    - {get: build-version, trigger: false, passed: [trigger-testnet]}
    - {get: pipeline-tasks}
  - task: deploy-web-testnet
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: misthos-web-build
      params:
          GCP_SERVICE_ACCOUNT: ((gcp-service-account))
          SUBDOMAIN: web-testnet
          WEB: "true"
      run:
        path: pipeline-tasks/ci/tasks/deploy.sh
  - put: web-testnet-branch
    params: {repository: repo, force: true}

- name: trigger-prod
  plan:
  - in_parallel:
    - {get: misthos-build, trigger: true, passed: [deploy-testnet]}
    - {get: misthos-web-build, trigger: false, passed: [deploy-web-testnet]}
    - {get: build-version, trigger: false, passed: [deploy-testnet, deploy-web-testnet] }
    - {get: repo, trigger: false, passed: [deploy-testnet, deploy-web-testnet]}
    - {get: pipeline-tasks}

- name: deploy-prod
  plan:
  - in_parallel:
    - {get: misthos-build, trigger: true, passed: [trigger-prod] }
    - {get: build-version, trigger: false, passed: [trigger-prod] }
    - {get: repo, trigger: false, passed: [trigger-prod] }
    - {get: pipeline-tasks }
  - task: deploy-prod
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: misthos-build
      params:
          GCP_SERVICE_ACCOUNT: ((gcp-service-account))
          SUBDOMAIN: app
      run:
        path: pipeline-tasks/ci/tasks/deploy.sh
  - put: prod-branch
    params: {repository: repo, tag: build-version/version, tag_prefix: "v", force: true}

- name: deploy-web-prod
  plan:
  - in_parallel:
    - {get: misthos-web-build, trigger: true, passed: [trigger-prod]}
    - {get: repo, trigger: false, passed: [trigger-prod]}
    - {get: build-version, trigger: false, passed: [trigger-prod]}
    - {get: pipeline-tasks}
  - task: deploy-web-prod
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: misthosio/misthos-web-pipeline}
      inputs:
      - name: pipeline-tasks
      - name: misthos-web-build
      params:
          GCP_SERVICE_ACCOUNT: ((gcp-service-account))
          SUBDOMAIN: www
          WEB: "true"
      run:
        path: pipeline-tasks/ci/tasks/deploy.sh
  - put: web-prod-branch
    params: {repository: repo, force: true}


- name: build-task-image
  serial: true
  plan:
    - {get: pipeline-ci-image, trigger: true}
    - put: docker-image-ci
      params:
        build: pipeline-ci-image/ci/ci_image

resources:
- name: repo
  type: git
  source:
    ignore_paths: [infra/*, ci/*, Makefile]
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: master
    private_key: ((github-ssh-key.private_key))
- name: deps
  type: git
  source:
    paths: [yarn.lock]
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: master
    private_key: ((github-ssh-key.private_key))
- name: staging-branch
  type: git
  source:
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: staging
    private_key: ((github-ssh-key.private_key))
- name: web-staging-branch
  type: git
  source:
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: web-staging
    private_key: ((github-ssh-key.private_key))
- name: testnet-branch
  type: git
  source:
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: testnet
    private_key: ((github-ssh-key.private_key))
- name: web-testnet-branch
  type: git
  source:
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: web-testnet
    private_key: ((github-ssh-key.private_key))
- name: prod-branch
  type: git
  source:
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: prod
    private_key: ((github-ssh-key.private_key))
- name: web-prod-branch
  type: git
  source:
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: web-prod
    private_key: ((github-ssh-key.private_key))
- name: bundled-deps
  type: gcs-resource
  source:
    bucket: artifact-cache
    json_key: ((gcp-service-account))
    regexp: bundled-deps-v(.*)-.*.tgz
- name: misthos-code
  type: gcs-resource
  source:
    bucket: artifact-cache
    json_key: ((gcp-service-account))
    regexp: misthos-code-v(.*)-.*.tgz
- name: misthos-build
  type: gcs-resource
  source:
    bucket: artifact-cache
    json_key: ((gcp-service-account))
    regexp: misthos-build-v(.*).tgz
- name: misthos-web-build
  type: gcs-resource
  source:
    bucket: artifact-cache
    json_key: ((gcp-service-account))
    regexp: misthos-web-build-v(.*).tgz
- name: deps-version
  type: semver
  source:
    initial_version: 1.0.0
    driver: gcs
    bucket: artifact-cache
    key: versions/misthos-deps-version
    json_key: ((gcp-service-account))
- name: code-version
  type: semver
  source:
    initial_version: 1.0.0
    driver: gcs
    bucket: artifact-cache
    key: versions/misthos-code-version
    json_key: ((gcp-service-account))
- name: build-version
  type: semver
  source:
    initial_version: 1.0.0
    driver: gcs
    bucket: artifact-cache
    key: versions/misthos-build-version
    json_key: ((gcp-service-account))
- name: pipeline-ci-image
  type: git
  source:
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: master
    paths: [ci/ci_image/*]
    private_key: ((github-ssh-key.private_key))
- name: pipeline-tasks
  type: git
  source:
    uri: git@github.com:misthosio/misthos-wallet.git
    branch: master
    paths: [ci/tasks/*, Makefile]
    private_key: ((github-ssh-key.private_key))
- name: docker-image-ci
  type: docker-image
  source:
    email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: misthosio/misthos-web-pipeline

resource_types:
  - name: gcs-resource
    type: docker-image
    source:
      repository: frodenas/gcs-resource
